{"name": "test_swipe", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: 'noReset' must be of type boolean\nStacktrace:\nInvalidArgumentError: 'noReset' must be of type boolean\n    at validateCaps (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\basedriver\\capabilities.js:52:11)\n    at parseCaps (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\basedriver\\capabilities.js:165:20)\n    at processCapabilities (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\basedriver\\capabilities.js:211:43)\n    at parseCapsForInnerDriver (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\lib\\utils.js:116:21)\n    at AppiumDriver.createSession (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\lib\\appium.js:325:26)\n    at commandExecutor (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\basedriver\\driver.js:335:9)\n    at AppiumDriver.executeCommand (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\basedriver\\driver.js:349:15)\n    at AppiumDriver.executeCommand (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\lib\\appium.js:549:26)\n    at asyncHandler (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\protocol\\protocol.js:297:34)\n    at C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\protocol\\protocol.js:423:15\n    at Layer.handle [as handle_request] (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\express\\lib\\router\\route.js:137:13)\n    at Route.dispatch (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\express\\lib\\router\\route.js:112:3)\n    at Layer.handle [as handle_request] (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\express\\lib\\router\\index.js:281:22\n    at Function.process_params (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\express\\lib\\router\\index.js:335:12)", "trace": "cmdopt = \"{'platform_version': '10', 'server_port': 4723, 'system_port': 8200, 'device': 'D5F7N18327001530'}\"\n\n    @pytest.fixture(scope='session')\n    def common_driver(cmdopt):\n        global driver\n        base_driver = BaseDriver(eval(cmdopt))\n>       driver = base_driver.base_driver()\n\ntestcase\\conftest.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\base_driver.py:51: in base_driver\n    driver = webdriver.Remote(f\"http://127.0.0.1:{self.device_info['server_port']}/wd/hub\",\nC:\\python3.8\\lib\\site-packages\\appium\\webdriver\\webdriver.py:257: in __init__\n    super().__init__(\nC:\\python3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:206: in __init__\n    self.start_session(capabilities)\nC:\\python3.8\\lib\\site-packages\\appium\\webdriver\\webdriver.py:346: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\nC:\\python3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000227060CBCD0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"\\'noReset\\' must be of type boolean\",\"stackt...ppData\\\\\\\\Roaming\\\\\\\\npm\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\express\\\\\\\\lib\\\\\\\\router\\\\\\\\index.js:335:12)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: 'noReset' must be of type boolean\nE       Stacktrace:\nE       InvalidArgumentError: 'noReset' must be of type boolean\nE           at validateCaps (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\basedriver\\capabilities.js:52:11)\nE           at parseCaps (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\basedriver\\capabilities.js:165:20)\nE           at processCapabilities (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\basedriver\\capabilities.js:211:43)\nE           at parseCapsForInnerDriver (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\lib\\utils.js:116:21)\nE           at AppiumDriver.createSession (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\lib\\appium.js:325:26)\nE           at commandExecutor (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\basedriver\\driver.js:335:9)\nE           at AppiumDriver.executeCommand (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\basedriver\\driver.js:349:15)\nE           at AppiumDriver.executeCommand (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\lib\\appium.js:549:26)\nE           at asyncHandler (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\protocol\\protocol.js:297:34)\nE           at C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\protocol\\protocol.js:423:15\nE           at Layer.handle [as handle_request] (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\express\\lib\\router\\layer.js:95:5)\nE           at next (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\express\\lib\\router\\route.js:137:13)\nE           at Route.dispatch (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\express\\lib\\router\\route.js:112:3)\nE           at Layer.handle [as handle_request] (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\express\\lib\\router\\layer.js:95:5)\nE           at C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\express\\lib\\router\\index.js:281:22\nE           at Function.process_params (C:\\Users\\YM520\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\express\\lib\\router\\index.js:335:12)\n\nC:\\python3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "description": "首页上滑", "attachments": [{"name": "log", "source": "300f9e32-f338-498c-8d17-fb1b6088a931-attachment.txt", "type": "text/plain"}], "start": 1699515263598, "stop": 1699515263598, "uuid": "67cc083e-19a7-47cb-9cf1-e885435425c8", "historyId": "e421b1e1d824030cb5eec3a99da61af9", "testCaseId": "e421b1e1d824030cb5eec3a99da61af9", "fullName": "870_testcase.test_login.TestLogin#test_swipe", "labels": [{"name": "severity", "value": "blocker"}, {"name": "story", "value": "首页上滑"}, {"name": "feature", "value": "登录"}, {"name": "parentSuite", "value": "870_testcase"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-CHVCFJK"}, {"name": "thread", "value": "65832-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "870_testcase.test_login"}]}